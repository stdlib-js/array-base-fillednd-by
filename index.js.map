{"version":3,"file":"index.js","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Recursive fills an array.\n*\n* @private\n* @param {NonNegativeInteger} ndims - number of dimensions\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {NonNegativeInteger} dim - dimension index\n* @param {NonNegativeIntegerArray} indices - outer array element indices\n* @param {Array} out - output array\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {Array} output array\n*/\nfunction recurse( ndims, shape, dim, indices, out, clbk, thisArg ) {\n\tvar idx;\n\tvar FLG;\n\tvar S;\n\tvar d;\n\tvar i;\n\n\t// Check whether we're filling the last dimension:\n\td = dim + 1;\n\tFLG = ( d === ndims );\n\n\tS = shape[ dim ];\n\tfor ( i = 0; i < S; i++ ) {\n\t\tidx = indices.slice(); // we explicitly copy in order to avoid potential mutation when calling `clbk`\n\t\tidx.push( i );\n\t\tif ( FLG ) {\n\t\t\tout.push( clbk.call( thisArg, idx ) );\n\t\t} else {\n\t\t\tout.push( recurse( ndims, shape, d, idx, [], clbk, thisArg ) );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Returns a filled two-dimensional nested array according to a provided callback function.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback execution context\n* @returns {Array} filled array\n*\n* @example\n* import constantFunction from '@stdlib/utils-constant-function';\n*\n* var out = filledndBy( [ 3, 1 ], constantFunction( 'beep' ) );\n* // returns [ [ 'beep' ], [ 'beep' ], [ 'beep' ] ]\n*/\nfunction filledndBy( shape, clbk, thisArg ) {\n\treturn recurse( shape.length, shape, 0, [], [], clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default filledndBy;\n"],"names":["recurse","ndims","shape","dim","indices","out","clbk","thisArg","idx","FLG","S","d","i","slice","push","call","length"],"mappings":";yCAmCA,SAASA,EAASC,EAAOC,EAAOC,EAAKC,EAASC,EAAKC,EAAMC,GACxD,IAAIC,EACAC,EACAC,EACAC,EACAC,EAOJ,IAHAH,GADAE,EAAIR,EAAM,KACIF,EAEdS,EAAIR,EAAOC,GACLS,EAAI,EAAGA,EAAIF,EAAGE,KACnBJ,EAAMJ,EAAQS,SACVC,KAAMF,GACLH,EACJJ,EAAIS,KAAMR,EAAKS,KAAMR,EAASC,IAE9BH,EAAIS,KAAMd,EAASC,EAAOC,EAAOS,EAAGH,EAAK,GAAIF,EAAMC,IAGrD,OAAOF,CACR,QAmBA,SAAqBH,EAAOI,EAAMC,GACjC,OAAOP,EAASE,EAAMc,OAAQd,EAAO,EAAG,GAAI,GAAII,EAAMC,EACvD"}